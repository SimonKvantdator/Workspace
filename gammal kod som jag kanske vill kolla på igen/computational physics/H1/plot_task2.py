import numpy as np
import matplotlib as mpl
from matplotlib import pyplot as plt
import struct

### for plotting nice plots ###
width = 6
height = width / 1.5
fsize = 16
font = {'size': fsize}    
mpl.rc('font', **font)
mpl.rc('xtick', labelsize=fsize)
mpl.rc('ytick', labelsize=fsize)
mpl.rc('text', usetex=False)

### read binary files generated by C ###
potential_energies = np.fromfile('potential_energies_task2.bin')
kinetic_energies = np.fromfile('kinetic_energies_task2.bin')
total_energies = potential_energies + kinetic_energies
parameters = np.fromfile('parameters_task2.bin')

### extract parameters used ###
nbr_timesteps = int(parameters[0])
dt = parameters[1]
nbr_atoms = parameters[2]
nbr_cells = nbr_atoms / 4
a0 = parameters[3]
t = np.array([i * dt for i in range(0, nbr_timesteps)])

### prepare broken axis ###
fig = plt.figure(figsize=(8,5))
ax = fig.add_subplot(111) # The big subplot
ax1 = fig.add_subplot(211)
ax2 = fig.add_subplot(212)

# Turn off axis lines and ticks of the big subplot
ax.spines['top'].set_color('none')
ax.spines['bottom'].set_color('none')
ax.spines['left'].set_color('none')
ax.spines['right'].set_color('none')
ax.set_xticks([])
ax.set_yticks([])

# do some other stuff
ax1.spines['bottom'].set_visible(False)
ax2.spines['top'].set_visible(False)
ax1.set_xticks([])
ax2.xaxis.tick_bottom()
d = .015  # how big to make the diagonal lines in axes coordinates

# arguments to pass to plot, just so we don't keep repeating them
kwargs = dict(transform=ax1.transAxes, color='k', clip_on=False)
ax1.plot((-d, +d), (-d, +d), **kwargs)        # top-left diagonal
ax1.plot((1 - d, 1 + d), (-d, +d), **kwargs)  # top-right diagonal
kwargs.update(transform=ax2.transAxes)  # switch to the bottom axes
ax2.plot((-d, +d), (1 - d, 1 + d), **kwargs)  # bottom-left diagonal
ax2.plot((1 - d, 1 + d), (1 - d, 1 + d), **kwargs)  # bottom-right diagonal

### plot E(t) ###
l0 = ax2.plot(t, potential_energies / nbr_cells, label=r'potential energy', color='C0')
l1 = ax1.plot(t, kinetic_energies / nbr_cells, label=r'kinetic energy', color='C1')
l2 = ax2.plot(t, total_energies / nbr_cells, label=r'total energy', color='C2')
ax.set_xlabel('\n' + r'$t$ [ps]')
ax.set_ylabel(r'$E$ [eV / unit cell]' + '\n\n\n')
ax1.set_ylim(top=0.7, bottom=-0.3)
ax1.set_yticks([0.6, 0.4, 0.2, 0.0])
ax2.set_yticks([-12.8, -13.0, -13.2])
ax2.set_ylim(top=-12.3, bottom=-13.3)


### plot 800 K line ###
kB = 8.617e-5 # Boltzmann constant [eV / K]
E_800K = (3 / 2) * kB * 800 * 4 # *4 since 4 atoms per unit cell
l3 = ax1.plot([min(t), max(t)], [E_800K, E_800K], 'r--', zorder=-1, label=r'kinetic energy at 800 K')

### legend & save file ###
fig.legend((l0[0], l1[0], l2[0], l3[0]), 
            (r'potential energy', r'kinetic energy', r'total energy', r'kinetic energy at 800 K'),
            loc=(0.38, 0.48))
plt.tight_layout()
filename = f'plot_task2_dt=' + str(dt) + '.pdf'
plt.savefig(filename, bbox_inches='tight')
plt.show()