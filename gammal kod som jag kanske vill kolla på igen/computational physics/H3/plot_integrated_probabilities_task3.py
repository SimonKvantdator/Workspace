import numpy as np
import matplotlib as mpl
from matplotlib import pyplot as plt
import struct

### for plotting nice plots ###
width = 6
height = width / 1.5
fsize = 16
font = {'size': fsize}
mpl.rc('font', **font)
mpl.rc('xtick', labelsize=fsize)
mpl.rc('ytick', labelsize=fsize)
mpl.rc('text', usetex=False)

### nature constants ###
hydrogen_mass = 104.5 # [eV fs^2 / A^2]

### things to be looped over ###
alphas = [0.5, 0.5, 0.5, 2.0, 2.0, 2.0]
T0s = [0.08, 0.10, 0.12, 0.08, 0.10, 0.12]
colors = ['C0', 'C1', 'C2', 'C0', 'C1', 'C2']
linestyles = ['-', '-', '-', '--', '--', '--']

### plot integrated probability densities ###
fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(8,4))
for (alpha, T0, color, linestyle) in zip(alphas, T0s, colors, linestyles):
	### read binary files generated by C ###
	x_list = np.fromfile(f'data/x_list_alpha={alpha:.1f}_T0={T0:.2f}_task3.bin')
	p_list = np.fromfile(f'data/p_list_alpha={alpha:.1f}_T0={T0:.2f}_task3.bin')
	real_psi_x_list = np.fromfile(f'data/real_psi_x_list_alpha={alpha:.1f}_T0={T0:.2f}_task3.bin') # real_psi_x_list[x_index + x_list_length * time_index], [A^(-1/2)]
	imag_psi_x_list = np.fromfile(f'data/imag_psi_x_list_alpha={alpha:.1f}_T0={T0:.2f}_task3.bin')
	real_psi_p_list = np.fromfile(f'data/real_psi_p_list_alpha={alpha:.1f}_T0={T0:.2f}_task3.bin')
	imag_psi_p_list = np.fromfile(f'data/imag_psi_p_list_alpha={alpha:.1f}_T0={T0:.2f}_task3.bin')
	parameters = np.fromfile(f'data/parameters_task3.bin') # {x0, x_max, x_list_length, timestep, nbr_timesteps, p0, d, alpha}


	### extract parameters ###
	x_list_length = int(parameters[2])
	timestep = parameters[3]
	nbr_timesteps = int(parameters[4])

	### exctract probability densities ###
	probs_x = real_psi_x_list**2 + imag_psi_x_list**2
	probs_p = real_psi_p_list**2 + imag_psi_p_list**2

	### determine integrated probability densities ###
	prob_less_than_0 = np.zeros(nbr_timesteps) # initiate
	for time_index in range(0, nbr_timesteps):
		current_probs_x = probs_x[x_list_length * time_index:x_list_length * (time_index + 1)]
		prob_less_than_0[time_index] = np.trapz(current_probs_x[x_list < 0], x_list[x_list < 0])

	### actually plot ###
	t = np.linspace(0.0, nbr_timesteps * timestep, nbr_timesteps)
	ax.plot(t, prob_less_than_0, linestyle=linestyle, color=color, label=r'$\alpha = $' + f'{alpha:.1f}, ' + r'$p_0^2 / (2 m) = $' + f'{T0:.2f}' + r' eV')

ax.set_xlabel(r'$t$ [fs]')
ax.set_ylabel(r'$P(x<0, t)$')
ax.set_xlim([0, 930])
ax.set_xticks([0, 100, 200, 300, 400])
ax.set_ylim([0.0, 1.07])

### legend & save file ###
plt.legend(loc='upper right')
plt.tight_layout()
filename = f'figures/prob_less_than_0_task3.pdf'
plt.savefig(filename)
filename = f'figures/prob_less_than_0_task3.png'
plt.savefig(filename)
plt.show()

### Does our time evolution respect the norm? ###
print(f'1 - ||psi|| = {1 - np.trapz(current_probs_x, x_list):.4e}')
