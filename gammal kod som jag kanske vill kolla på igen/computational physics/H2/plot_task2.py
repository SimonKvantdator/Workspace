import numpy as np
import matplotlib as mpl
from matplotlib import pyplot as plt
import struct

### for plotting nice plots ###
width = 6
height = width / 1.5
fsize = 16
font = {'size': fsize}
mpl.rc('font', **font)
mpl.rc('xtick', labelsize=fsize)
mpl.rc('ytick', labelsize=fsize)
mpl.rc('text', usetex=False)

def rho_from_central_approx(r, Z=2):
    return Z**3 * 4 * r**2 * np.exp(-2 * Z * r)

### read binary files generated by C ###
E_local_list = np.fromfile("E_local_list_task2.bin")
autocorrelations = np.fromfile("autocorrelations_task2.bin")
s = np.fromfile("s_task2.bin")
parameters = np.fromfile("parameters_task2.bin") # {alpha, Delta, nbr_samples}

### extract parameters ###
alpha = parameters[0]
Delta = parameters[1]

### plot E_local_list ###
fig, ax = plt.subplots(figsize=(8,4))
ax.plot(E_local_list[0:600], color='C1')
ax.set_xlabel(r'iteration')
ax.set_ylabel(r'$E_\mathrm{local}$ [a.u.]')

### legend & save file ###
plt.tight_layout()
filename = f'plot_E_task2.pdf'
plt.savefig(filename)
plt.show()


### plot autocorrelation & s(block_size) ###
fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(8,4))
ax1.plot(autocorrelations[0:30], color='C1', label=r'autocorrelation')
ax1.axhline(np.exp(-2), label=r'$\mathrm{e}^{-2}$')
ax1.set_xlabel(r'iteration')
ax2.plot(s, color='C2')
ax2.set_xlabel(r'block size')
ax2.set_ylabel(r'$s$')

### legend & save file ###
ax1.legend()
plt.tight_layout()
filename = f'plot_autocorrelation_and_s(B)_task2.pdf'
plt.savefig(filename)
plt.show()

### print statistical inefficiency ###
delta = np.exp(-2)
bool_array = (autocorrelations > delta)
print(f's from autocorrelation = {sum(bool_array) - 1:d}') # how many indices before the autocorrelation < delta
print(f's from block averaging = {np.mean(s[int(len(s) / 2):-1]):4f}') # mean of second half of s