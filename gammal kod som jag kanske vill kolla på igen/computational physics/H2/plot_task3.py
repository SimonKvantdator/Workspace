import numpy as np
import matplotlib as mpl
from matplotlib import pyplot as plt
import struct

### for plotting nice plots ###
width = 6
height = width / 1.5
fsize = 16
font = {'size': fsize}
mpl.rc('font', **font)
mpl.rc('xtick', labelsize=fsize)
mpl.rc('ytick', labelsize=fsize)
mpl.rc('text', usetex=False)

### read binary files generated by C ###
alphas = np.fromfile("alphas_task3.bin")
energies = np.fromfile("energies_task3.bin") # energies[walker_index + alpha_index * nbr_walkers
variances = np.fromfile("variances_task3.bin") # variances[walker_index + alpha_index * nbr_walkers
parameters = np.fromfile("parameters_task1.bin") # {alpha, Delta, nbr_samples, nbr_walkers}

### extract parameters ###
nbr_samples = int(parameters[2])
nbr_walkers = int(parameters[3])
alphas_length = len(alphas)
print(f'nbr_alphas  = {alphas_length}')
print(f'nbr_samples = {nbr_samples}')
print(f'nbr_walkers = {nbr_walkers}')

### take average over walkers ###
mean_energies = np.array([np.mean(energies[nbr_walkers * i:nbr_walkers * (i+1)]) for i in range(alphas_length)])
mean_variances = np.array([np.mean(variances[nbr_walkers * i:nbr_walkers * (i+1)]) for i in range(alphas_length)])
statistical_inefficiency = 8
sigmas = np.sqrt(mean_variances / (nbr_samples / statistical_inefficiency))

### plot energies ###
fig, ax = plt.subplots(figsize=(8,4))
ax.scatter(alphas[0], energies[0::nbr_walkers][0], color='C1',
											alpha=0.3,
											zorder=1,
											label=r'single walker $E(\alpha)$')
ax.errorbar(alphas[0], mean_energies[0], yerr=2 * sigmas[0],
								capsize=3.0,
								linestyle='',
								marker='o',
								color='C0',
								zorder=2,
								label=r'mean $E(\alpha) \pm 2 \sigma$')
for j in range(0, alphas_length, 2): # plot only for every 3rd alpha
	for i in range(0, nbr_walkers):
		ax.scatter(alphas[j], energies[i::nbr_walkers][j], color='C1',
													alpha=0.15,
													zorder=1)
	ax.errorbar(alphas[j], mean_energies[j], yerr=2 * sigmas[j],
								capsize=3.0,
								linestyle='',
								marker='o',
								color='C0',
								zorder=2)
ax.set_xlabel(r'$\alpha$')
ax.set_ylabel(r'[a.u.]')

### legend & save file ###
plt.legend()
plt.tight_layout()
filename = f'plot_task3.pdf'
plt.savefig(filename)
plt.show()